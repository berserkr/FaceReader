function [proymat,nda]=MB_MyNDA(train,K,dim,useweights)%NONPARAMETRIC DISCRIMINANT ANALYSIS%%'train' is a data structure with the following fields:%   .mat ----> contains the samples (organized by columns)%   .labels ----> contains the labels corresponding to the samples%   .N ------> total number of samples%   .dim ------> dimension of the data%   .totclass ------> number of classes%ejemplo:%%nda=(train,1,10,0)%%computes 'nda' of dimension 10 (for the data specified in the structure 'train')%using 1 nearest neighbor and without weighting the samples.%%%%proymat is nda.Wif ~isfield(train,'labels')    error('ERROR: Labels should come together with the training set.');else    totclass=train.totclass;endif nargin==3    useweights=0;endnda.dim=dim;nda.origdim=train.dim;nda.N=train.N;nda.meandata=mean(train.mat,2);train.mat=train.mat-nda.meandata*ones(1,train.N);%Memory Allocation...indIn=zeros(K,nda.N);indEx=zeros(K,nda.N);valIn=zeros(K,nda.N);valEx=zeros(K,nda.N);%Within class scatter matrix whiteningfprintf('Distances for within-class scatter... ');for numclass=1:totclass    fprintf('%03d',numclass);    who_cl=find(train.labels==numclass);    data_intra=train.mat(:,who_cl);    cuantos=length(who_cl);    %Distancias intra clase...    [dintra,indintra]=knn_eu(data_intra,data_intra,K+1);    if cuantos<K+1 %there are fewer samples in the class than neighbors        for i=1:K+1-cuantos            indintra(i,:)=indintra(K,:);            dintra(i,:)=dintra(K,:);        end    end    dintra(K+1,:)=[];     indintra(K+1,:)=[];    indIn(:,who_cl)=who_cl(indintra);    valIn(:,who_cl)=dintra;    clear dintra indintra;       fprintf('\b\b\b');    clear who_cl who_notcl data_extra data_intraendfprintf('\n');fprintf('Within-class scatter matrix...\n');if K==1    mnnIn=train.mat(:,indIn);else    mnnIn=zeros(train.dim,train.N);    for n=1:train.N        mnnIn(:,n)=mean(train.mat(:,indIn(:,n)),2);    endenddifIntra=train.mat-mnnIn;%norDifIntra=sqrt(sum(difIntra.*difIntra));%difIntra=difIntra./(ones(train.dim,1)*(norDifIntra+(norDifIntra==0)));%difIntra=difIntra(:,find(norDifIntra>(mean(norDifIntra)+std(norDifIntra))));%centDifIntra=difIntra-mean(difIntra,2)*ones(1,nda.N);nda.Wscat=difIntra*difIntra'/size(difIntra,2);%nda.Wscat=(centDifIntra)*(centDifIntra)'/train.N;[evec,eval]=eig(nda.Wscat);eval=diag(eval);[eval,ind]=sort(eval);eval=flipud(eval);ind=flipud(ind);evec=evec(:,ind);wdim=max(find(eval>1.0e-8));evec=evec(:,1:wdim);nda.whiteMat=diag(1./sqrt(eval(1:wdim)))*evec';%The data is whitening with respect to SwWtr=nda.whiteMat*train.mat;fprintf('Distances for between-class scatter... ');for numclass=1:totclass    fprintf('%03d',numclass);    who_cl=find(train.labels==numclass);    who_notcl=find(train.labels~=numclass);    data_intra=Wtr(:,who_cl);    data_extra=Wtr(:,who_notcl);        [dextra,indextra]=knn_eu(data_extra,data_intra,K);    indEx(:,who_cl)=who_notcl(indextra);    valEx(:,who_cl)=dextra;    clear dextra indextra;    fprintf('\b\b\b');    clear who_cl who_notcl data_extra data_intraendfprintf('\n');fprintf('Between-class scatter matrix...\n');if K==1    mnnEx=Wtr(:,indEx(1,:));else    mnnEx=zeros(size(Wtr,1),train.N);    for n=1:train.N        mnnEx(:,n)=mean(Wtr(:,indEx(:,n)),2);    endenddifExtra=Wtr-mnnEx;%centDifExtra=difExtra-mean(difExtra,2)*ones(1,nda.N);%Depending on the use or not of the weightsif useweights    nda.weights=min(valIn(K,:),valEx(K,:))./(valIn(K,:)+valEx(K,:));    %nda.Bscat=((ones(size(Wtr,1),1)*nda.weights).*(centDifExtra))*(centDifExtra)'/train.N;    nda.Bscat=((ones(size(Wtr,1),1)*nda.weights).*(difExtra))*(difExtra)'/train.N;else    %nda.Bscat=(centDifExtra)*(centDifExtra)'/train.N;    nda.Bscat=(difExtra)*(difExtra)'/train.N;end[evec,eigval]=eig(nda.Bscat);eigval=diag(eigval);[val,ind]=sort(eigval);ind=flipud(ind);nda.eigval=eigval(ind);nda.eigvec=evec(:,ind(1:min(dim,wdim)));nda.mat=nda.eigvec'*Wtr;nda.W=nda.eigvec'*nda.whiteMat;%nda.W=diag(1./sqrt(nda.eigval(1:dim)))*nda.eigvec'*nda.whiteMat;proymat=nda.W;